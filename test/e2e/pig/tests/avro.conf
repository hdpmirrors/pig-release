#!/usr/bin/env perl


$cfg = {
        'driver' => 'Pig',

        'groups' => [

                {
                'name' => 'Avro',
                'tests' => [

 #--------------------------------------------------------------------------------

                        {
                        'num' => 1,
                        # array w. one array element (record w. two fields)
                        # Add tests with more elements !!!
                        'notmq' => 1,
                        'pig' => q\

s = load ':INPATH:/singlefile/studenttab10k' using PigStorage() as (name:chararray, age:chararray, gpa:chararray);
sl = filter s by age == '21';

sb = foreach sl generate age, TOBAG(TOTUPLE(name, gpa));
describe sb;

-- WRITE
store sb into ':OUTPATH:.intermediate' USING AvroStorage('
{
    
        "name" : "Users",
        "type" : "record",
        "fields" : [
            {  
               "name" : "age",
               "type" : "string"
           },
           {  
               "name" : "userArray",
               "type" : {
                    "type" : "array",
                    "items" : {   
                       "name" : "UserRecord",
                       "type" : "record",
                       "fields" : [
                          { "name" : "name", "type" : "string" },
                          { "name" : "gpa",  "type" : "string" }
                      ]
                   }
               }
           }
        ]
     
}
');

exec;

-- READ
sa = load ':OUTPATH:.intermediate' USING AvroStorage();
describe sa;

store sa into ':OUTPATH:';
\,

 # -- sb: {age: chararray,{(name: chararray,gpa: chararray)}}
 # -- sa: {age: chararray,userArray: {ARRAY_ELEM: (name: chararray,gpa: chararray)}}
 # -- (21,{(ulysses allen,1.68)})
 # -- (21,{(nick nixon,1.12)})
 # -- (21,{(priscilla polk,0.52)})
 # -- (21,{(luke hernandez,2.65)})
 # -- (21,{(victor robinson,3.51)})

                        'verify_pig_script' => q\
p = load ':INPATH:/singlefile/studenttab10k' using PigStorage() as (name:chararray, age:chararray, gpa:chararray);
pl = filter p by age == '21';
pb = foreach pl generate age, TOBAG(TOTUPLE(name, gpa));
describe pb;
store pb into ':OUTPATH:';
\,
                        },

 #--------------------------------------------------------------------------------
                        {
                        'num' => 2,
                        # Multiple files loaded, similar but with different names for fields
                        # Reader schema givies aliases for the fields to reconsile them
                        # This is an expanded version of test below that has example from AVRO-600 JIRA.
                        'notmq' => 1,
                        'pig' => q\

a = load ':INPATH:/singlefile/allscalar10k' using PigStorage() as (name:chararray, age:int, gpa:float, instate:boolean);

-- Store Avro file, two columns
b2 = filter a by 0 < age and age < 20;
c2 = foreach b2 generate (int)2 as column_count, name, age, gpa, instate;
describe c2;
store c2 into ':OUTPATH:.intermediate_2c' USING AvroStorage(
'{
   "debug" : 5,
   "index" : 2,
   
      "name" : "schema_writing_2",
      "type" : "record",
      "fields" : [
         {  
            "name" : "column_count_2",
            "type" : "int"
         },
         {  
            "name" : "name",
            "type" : ["null", "string"]
         },
         {  
            "name" : "age",
            "type" : ["null", "int"]
         },
         {  
            "name" : "gpa",
            "type" : ["null", "float"]
         },
         {  
            "name" : "instate",
            "type" : ["null", "boolean"]
         }
      ]
   }
}'
);

-- Store Avro file, three columns
b3 = filter a by (20 < age and age < 40) or (age == 0);
c3 = foreach b3 generate (int)3 as column_count, name, (age == 0 ? null : age) as age, gpa, instate;
describe c3;
store c3 into ':OUTPATH:.intermediate_3c' USING AvroStorage(
'{
   "debug" : 5,
   "index" : 3,
   
      "name" : "schema_writing_3",
      "type" : "record",
      "fields" : [
         {  
            "name" : "column_count_3",
            "type" : "int"
         },
         {  
            "name" : "name_3",
            "type" : ["null", "string"]
         },
         {  
            "name" : "age",
            "type" : ["null", "int"]
         },
         {  
            "name" : "gpa_3",
            "type" : ["null", "float"]
         },
         {  
            "name" : "instate_3",
            "type" : ["null", "boolean"]
         }
      ]
   }
}'
);

-- Store Avro file, four columns
b4 = filter a by (40 < age and age < 60);
c4 = foreach b4 generate (int)4 as column_count, name, age, gpa, instate;
describe c4;
store c4 into ':OUTPATH:.intermediate_4c' USING AvroStorage(
'{
   "debug" : 5,
   "index" : 4,
   
      "name" : "schema_writing_4",
      "type" : "record",
      "fields" : [
         {  
            "name" : "column_count_4",
            "type" : "int"
         },
         {  
            "name" : "name_4",
            "type" : ["null", "string"]
         },
         {  
            "name" : "age_4",
            "type" : ["null", "int"]
         },
         {  
            "name" : "gpa",
            "type" : ["null", "float"]
         },
         {  
            "name" : "instate",
            "type" : ["null", "boolean"]
         }
      ]
   }
}'
);


-- Store Avro file, five columns
b5 = filter a by (60 < age);
c5 = foreach b5 generate (int)5 as column_count, name, age, gpa, instate;
describe c5;
store c5 into ':OUTPATH:.intermediate_5c' USING AvroStorage(
'{
   "debug" : 5,
   "index" : 5,
   
      "name" : "schema_writing_5",
      "type" : "record",
      "fields" : [
         {  
            "name" : "column_count_5",
            "type" : "int"
         },
         {  
            "name" : "name_2",
            "type" : ["null", "string"]
         },
         {  
            "name" : "age_3",
            "type" : ["null", "int"]
         },
         {  
            "name" : "gpa_4",
            "type" : ["null", "float"]
         },
         {  
            "name" : "instate_5",
            "type" : ["null", "boolean"]
         }
      ]
   }
}'
);


exec;

-- Read back what was stored with Avro giving default for the added column
ra = load ':OUTPATH:.intermediate_[2345]c' USING AvroStorage(
'{
   "debug" : 5,
   
      "name" : "schema_reading_w_aliases",
      "aliases": ["schema_writing_2", "schema_writing_3", "schema_writing_4", "schema_writing_5"],
      "type" : "record",
      "fields" : [
         {  
            "name" : "column_count_read",
            "aliases": ["column_count_2", "column_count_3","column_count_4","column_count_5"],
            "type" : "int"
         },
         {  
            "name" : "name_read",
            "aliases": ["name", "name_2","name_3","name_4"],
            "type" : ["string", "null"],
            "default" : "Nemo"
         },
         {  
            "name" : "age_read",
            "aliases": ["age", "age_2","age_3","age_4"],
            "type" : ["string", "null"],
            "type" : ["int", "null"],
            "default" : -1
         },
         {  
            "name" : "gpa",
            "aliases": ["gpa_3","gpa_4"],
            "type" : ["float", "null"],
            "default" : -0.1
         },
         {  
            "name" : "instate",
            "aliases": ["instate_3","instate_5"],
            "type" : ["boolean", "null"],
            "default" : false
         }
      ]
   }
}'
);
describe ra;
store ra into ':OUTPATH:';
\,


                        'verify_pig_script' => q\
a = load ':INPATH:/singlefile/allscalar10k' using PigStorage() as (name:chararray, age:int, gpa:float, instate:boolean);

b2 = filter a by 0 < age and age < 20;
c2 = foreach b2 generate (int)2 as column_count, name, age, gpa, instate;

b3 = filter a by (20 < age and age < 40) or (age == 0);
c3 = foreach b3 generate (int)3 as column_count, name, (age == 0 ? null : age) as age, gpa, instate;

b4 = filter a by (40 < age and age < 60);
c4 = foreach b4 generate (int)4 as column_count, name, age, gpa, instate;;

b5 = filter a by (60 < age);
c5 = foreach b5 generate (int)5 as column_count, name, age, gpa, instate;

d = union onschema c2, c3, c4, c5;

store d into ':OUTPATH:';
\,
                        },

 #--------------------------------------------------------------------------------

                        {
                        'num' => 3,
                        # One file loaded
                        # Reader schema givies aliases for the fields that are renamed in the reader schema
                        # Example from https://issues.apache.org/jira/browse/AVRO-600:
                        # Expect: When instances are read, values for "a" would be read into the "c" field, values for "b" would be dropped, and "d" would have the default value of zero.
                        'notmq' => 1,
                        'pig' => q\

-- Store Avro file
a1 = load ':INPATH:/types/numbers.txt' using PigStorage(':') as (intnum1000: int,id: int,intnum5: int,intnum100: int,intnum: int,longnum: long,floatnum: float,doublenum: double);
b1 = filter a1 by 10 <= id and id < 20;
c1 = foreach b1 generate id as a, intnum5 as b;
describe c1;
store c1 into ':OUTPATH:.intermediate' USING AvroStorage(
'{
   "debug" : 5,
   "index" : 1,
   
      "type": "record", "name": "org.x.Foo", "fields": [
          {"name": "a", "type": "int"},
          {"name": "b", "type": "int"}
       ]
   }
}'
);

exec;

-- Read back what was stored with Avro giving aliases
ra = load ':OUTPATH:.intermediate' USING AvroStorage(
'{
   "debug" : 5,
   
      "type": "record", "name": "org.y.Bar", "fields": [
          {"name": "c", "type": "int", "aliases": ["a"]},
          {"name": "d", "type": "int", "default": 0}
      ],
      "aliases": ["org.x.Foo"]
   }
}'
);
describe ra;
store ra into ':OUTPATH:';
\,


                        'verify_pig_script' => q\
a = load ':INPATH:/types/numbers.txt' using PigStorage(':') as (intnum1000: int,id: int,intnum5: int,intnum100: int,intnum: int,longnum: long,floatnum: float,doublenum: double);
b = filter a by 10 <= id and id < 20;
c = foreach b generate id as a, 0 as b;
store c into ':OUTPATH:';
\,
                        },

 #--------------------------------------------------------------------------------

                        {
                        'num' => 4,
                        # fixed typo enabled this test case and it passes, nullable is no longer supported in builtin AvroStorage
                        #'ignore' => 'Ticket 6328783 - AVRO: documentation of AvroStorage not clear on use of "nullable"',
                        # Use of nullable
                        # Test checks that writing does not fail, and the written can be read back
                        # !!! NOTE: Verification of the schema in the file was done manually !!!
                        # !!! Findings recorded in Ticket 6328783.
                        'notmq' => 1,
                        'pig' => q\
s1 = load ':INPATH:/singlefile/studenttab10k' using PigStorage() as (name:chararray, age:int, gpa:float);
s1 = filter s1 by age == 21;
store s1 into ':OUTPATH:.nullable_default' USING AvroStorage();

s2 = load ':INPATH:/singlefile/studenttab10k' using PigStorage() as (name:chararray, age:int, gpa:float);
s2 = filter s2 by age == 22;
store s2 into ':OUTPATH:.nullable_false' USING AvroStorage('nullable','false');

s3 = load ':INPATH:/singlefile/studenttab10k' using PigStorage() as (name:chararray, age:int, gpa:float);
s3 = filter s3 by age == 23;
store s3 into ':OUTPATH:.nullable_true' USING AvroStorage('nullable','true');

s4 = load ':INPATH:/singlefile/studenttab10k' using PigStorage() as (name:chararray, age:int, gpa:float);
s4 = filter s4 by age == 24;
store s4 into ':OUTPATH:.nullable_full_schema' USING AvroStorage(
'{
   "debug" : 5,
   "index" : 4,
   
      "name" : "schema_writing",
      "type" : "record",
      "fields" : [
         {  
            "name" : "name",
            "type" : "string"
         },
         {  
            "name" : "age",
            "type" : "int"
         },
         {  
            "name" : "gpa",
            "type" : "float"
         }
      ]
   }
}'
);

exec;

-- Read back what was stored with Avro 
g = load ':OUTPATH:.nullable*' USING AvroStorage('multiple_schemas');
store g into ':OUTPATH:';
\,


                        'verify_pig_script' => q\
p = load ':INPATH:/singlefile/studenttab10k' using PigStorage() as (name:chararray, age:int, gpa:float);
pf = filter p by (age >= 21) and (age <= 24);
store pf into ':OUTPATH:';
\,
                        },
                ]  # end tests
                }, # end group
     ] # end groups
};
